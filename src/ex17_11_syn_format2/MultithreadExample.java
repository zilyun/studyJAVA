package ex17_11_syn_format2;
/* 39... <- JVM이 계산 중에 읽어와서 생긴 현상
 * 40...
 * 40...
 * 
 * 40... <- JVM이 계산을 끝내고 읽어와서 생긴 현상
 * 40...
 * 40... 
 * - 문제 해결법
 *   동기화: 공유 데이터 사용 중에 그 공유 데이터를 다른 스레드가 사용하지 못하도록 만드는 것을 의미합니다.
 *   동기화란 인터넷에 저장되어 있는 자신의 데이터 자료와 자신의 스마트폰 또는 컴퓨터의 자료를 서로 주고받아서 정보의 최신성을 동일하도록 만드는 것을 의미합니다.
 */
/* - 멀티스레드 프로그램에서 스레드들이 번갈아 실행되는 스케쥴은 
 * 	 자바 가상 기계에 의해 임의로 정해지는데 이로 인해 적절치 못한 순간에 다른 스레드로 제어가 넘어가서
 * 	 예기치 못한 문제가 발생할 수 있습니다. (Race condition 현상)
 * 	 이런 문제는 주로 공유 데이터를 사용하는 부분에서 일어나는데 이런 부분을 critical section(임계 영역)이라고 합니다. 
 * 	 임계영역
 * 	 - Race condition 현상이 발생할 수 있는 코드/부분/영역
 *   이 문제를 일으키지 않도록 하려면 그 부분이 실행되는 동안 다른 스레드가 공유 데이터를 사용할 수 없도록 만들어야 합니다. 
 *   그렇게 하는 것을 critical section 의 동기화라고 합니다.
 *   상호배제   
 *   - 특정 프로세스가 공유자원을 사용하고 있을 경우, 다른 프로세스가 해당 공유 자원을 사용하지 못하게 제어하는 기법 
 * 	 - 여러 프로세스가 동시에 공유자원을 사용할 때, 각 프로세스가 번갈아가며 자원을 사용하게끔 임계 구역을 유지
 *   즉, 레이스 컨디션 현상을 방지하기 위해 공유할 수 있는 임계 영역을 상호 배제하여 동기화한다.
 *  
 *  - 임계 영역의 동기화 방법
 *  	1. 동기화 블럭 : 일부분(EX:객체)만 임계 영역으로 만들 경우
 *  		메소드 선언{
 *  			synchronized (동기화할 객체){
 *  				임계 영역 코딩 // 단 하나의 스레드만 실행됩니다.
 *  			}
 *  		}
 * 		2. 동기화 메소드 : 메소드 전체 내용을 임계 영역으로 만들 경우 
 * 			synchronized 메소드 선언 {
 * 					
 * 			}
 * */
public class MultithreadExample {
	public static void main(String[] args) {
		Account a1 = new Account("111-111-1111", "회사", 20000000);
		Account a2 = new Account("222-222-2222", "직원", 10000000);
		SharedArea s= new SharedArea(a1, a2);
		PrintThread t1 = new PrintThread(s);
		TransferThread t2 = new TransferThread(s);
		t1.start();
		t2.start();
	}
}
